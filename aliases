# -*- shell-script -*-
##############################
##############################
##
## Set environmental variables
##
##############################
##############################

# A simple prompt
PS1='[\u@\h \W]\$ '

# Misc bash settings
export HISTCONTROL=ignoredups:ignorespace
set echo-control-characters off
shopt -s expand_aliases

# Set default editor
export EDITOR="eclient"
export VISUAL="eclient"

# fix the incorrect terminal specifications
#export TERM=xterm-256color

# Completion settings
complete -cf sudo
complete -cf ssudo
complete -cf man
complete -cf until

# Auto coloring
alias ls='ls --color=auto'
alias lh='ls -lh'
alias ll='ls -l'
alias la='ls -A'
alias less='less -R'
alias lesss='less -RS'
alias rgrep='grep -R'
alias grep='grep -n --color=auto'
export GREP_COLORS='mt=0;34'

##############################
##############################
##
## Utility Functions
##
##############################
##############################
function abspath ()
{
    echo "$(cd $(dirname "$@"); pwd -P)/$(basename "$@")"
}

function tarball ()
{
    local FILE
    for FILE in "${@}"
    do
        echo "===== Creating Tarball of $FILE ====="
        if tar cvvjf "${FILE%%/}.tbz2" "$FILE"; then
            echo "> Success"
            echo "> Removing old copy of $FILE"
            rm -rf "$FILE"

        else
            echo "> Failure"
            rm -f "${FILE%%/}.tbz2"

        fi
    done
}

# Based on sample from alias.sh
function extract ()
{
    local FILE
    for FILE in "${@}"
    do
        if [ -f "$FILE" ] ; then
            case "$FILE" in
                *.tar.bz2) tar xvjf      "$FILE" ;;
                *.tar.gz)  tar xvzf      "$FILE" ;;
                *.bz2)     bunzip2 -v    "$FILE" ;;
                *.rar)     unrar x -v    "$FILE" ;;
                *.gz)      gunzip  -v    "$FILE" ;;
                *.tar)     tar xvf       "$FILE" ;;
                *.tbz2)    tar xvjf      "$FILE" ;;
                *.tgz)     tar xvzf      "$FILE" ;;
                *.zip)     unzip  -v     "$FILE" ;;
                *.7z)      7z x          "$FILE" ;;
                *)
                    echo "'$FILE' cannot be extracted via extract"
                    ;;
            esac
        else
            echo "'$FILE' is not a valid file"
        fi
    done
}

function mid()
{
    local start="$1"
    local end="$2"
    local file="$3"

    [ ! "$file" ] && file='-'

    tail -n+"$start" "$file" | head -n"$end"
}

function line-nums() { nl -ba "$@"; }

# Based on a directory size alias on alias.sh
# Converts bytes into higher-order representations
function human-number()
{
    local size;
    local unit;
    for size in "$@"
    do
        for unit in {k,M,G,T,P,E,Z,Y}
        do
            if [ "$size" -lt 1024 ]; then
                echo "${size}${unit}"
                break
            fi
            size=$(( size / 1024 ))
        done
    done
}

# Based off a sample found on commandlinefu.com
function find-duplicates ()
{
    find "$@" -not -empty -type f -printf "%s\0"                  | \
        sort -rnz                                                 | \
        uniq -dz                                                  | \
        xargs -0 -I{} -n1 -P0 find "$@" -type f -size {}c -print0 | \
        xargs -0 -n1 -P0 md5sum                                   | \
        sort                                                      | \
        uniq -w32 --all-repeated=separate
}

# Prints the top 20 disk space hogs in the current directory
function dirsize ()
{
    local root="$1/";
    [ ! "$1" ] && root='.'

    find "$root" -maxdepth 1 -not -name '.' -print0 | # Find all files in the directory
        # in $root, except '.' (we don't
        # need totals). Separate each file
        # name with a null terminator.
        xargs -0 -r -n1 -P0 du -0 -sh | # Run each file through du to get a human
        # readable summary size. Keep null as the
        # separator. Run 1 du instance per file, but
        # run as many in parallel as possible. This
        # will speed things up considerably as it is
        # mostly IO calls
        sort -hz       | # Sort by human-readable numbers, keeping null as the separator.
        tr   '\0' '\n' | # Change the nulls to newlines for easy reading.
        tail -n20      | # Only show the top 20 offenders
        sed 's|\./||'    # Remove the annoying ./ in front of the file names
}

# List 10 commands with the most open file descriptors
function open-descriptors-by-command ()
{
    lsof -n |
        tail -n+2 |
        sed -E 's/ +/ /g' |
        cut -d' ' -f1 |
        sort |
        uniq -c |
        sort -n |
        tail
}

##############################
##############################
##
## Functions for cleaning up
## input
##
##############################
##############################

alias cleanxml='xmllint --format -'
alias cleanhtml='xmllint --html --format -'
alias cleanjson='python -mjson.tool'

##############################
##############################
##
## Functions for background
## spawning
##
##############################
##############################
function spawn()
{
    ( ( "$@" 2>/dev/null >/dev/null & ) & )
}

function s()  { spawn "$@";     }


# Completion for background forks
complete -cf spawn
complete -cf s

##############################
##############################
##
## Command line web search
##
##############################
##############################

# Helper function to web encode a string
function webSafe()
{ echo "$@" | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g'; }

# Get the contents of the clipboard if there are no passed arguments
function argClip()
{
    local target="$@"
    if [ ! "$target" ]; then
        target="$(xpaste)"
    fi
    echo "$target"
}

# Search argument capture
function query()
{ webSafe "$(argClip "$@")"; }

function force-url()
{
    if [[ "$@" =~ '^https?://' ]]; then
        echo "$@"
    else
        echo 'https://'"$(sed -re 's_^.*?://__' <<< "$@")"
    fi
}

function googleSearch-incognito()
{ go-incognito  "http://www.google.com/search?q=$(query $@)" ; }

function googleImageSearch() { go "http://www.google.com/search?q=$(query $@)&safe=active&tbm=isch"            ; }
function define()            { googleSearch "define:$(argClip "$@")"                ; }
function wiki()              { googleSearch "site:en.wikipedia.org $(argClip "$@")" ; }
function pt-to-en()          { "$BROWSER" 'https://translate.google.com/#pt/en/'"$(argClip "$1")"; }
function en-to-pt()          { "$BROWSER" 'https://translate.google.com/#en/pt/'"$(argClip "$1")"; }
function lds()               { go "http://www.lds.org/search?lang=eng&query=$(query $@)" ; }
function scriptures()        { go "http://www.lds.org/search?lang=eng&query=$(query $@)&collection=scriptures" ; }
function cpp()               { googleSearch "site:cplusplus.com/ $(argClip "$@")" ; }

# Got from alias.sh
function html-header() { curl --head "$(argClip "$@")"; }

##############################
##############################
##
## Git/hub
##
##############################
##############################

alias gci='git commit'
alias gco='git checkout'
alias gamend='git commit --amend'
alias grb='git rebase -p'
alias girb='git rebase -i'
alias grb.abrt='git rebase --abort'
alias grb.cont='git rebase --continue'
alias grb.skip='git rebase --skip'

alias gbr='git branch'
alias gbr.stat='git branch -vv'
alias gbr.create='git checkout -b --track'
alias gbr.set-remote='git branch --set-upstream-to=origin/"$(git.branch)"'

alias gmerge='git merge --no-ff'

alias gfetch='git fetch -p'
alias gpull='git pull'
alias gpullr='git pull --rebase'
alias gpush='git push origin "HEAD:$(git.branch)"'

alias gadd='git add'

alias glog='git log'
alias gstat='git status'
alias gdiff='git diff --ignore-space-at-eol'
alias gshow='git show --ignore-space-at-eol'

function git.branch() {
    git symbolic-ref HEAD 2>/dev/null | sed -e 's/refs\/heads\///'
}

function git.retag() {
    local root=$(git root)
    if [ -n "$root" ]; then
        ( cd "$root" && ctags -a -e -f TAGS --tag-relative -R app lib vendor )
    else
        return 1
    fi
}

function git.upstream-url () {
    git config --get remote.origin.url | \
        sed \
            -e 's_git@_https://_' \
            -e 's_\.com:_.com/_' \
            -e 's_\.git$__'
}

function git.github() {
    local url=$(git.upstream-url)

    if [ "x$url" != "x" ]; then
        go "${url}/tree/$(git.branch)"
    else
        go "https://github.com/morgen-peschke?tab=repositories"
    fi
}

function git.github.new-pull-request () {
    echo "$(git.upstream-url)/pull/new/$(git.branch)"
}

function git.serve() {
    git daemon --reuseaddr --base-path=. --export-all --verbose --informative-errors
}

# Note: cannot write to current server branch
function git.serve.writable() {
    git daemon --reuseaddr --base-path=. --export-all --verbose --informative-errors --enable=receive-pack
}

function git.sync () {
    git fetch -p "$@"
}

##############################
##############################
##
## Rails Helpers
##
##############################
##############################

alias rake='rake -t'

function rails-resque-pool () {
    resque-pool "$(git root)/config/resque-pool.yml"
}

alias rails-test-units="rake test:units"
alias rails-test-functionals="rake test:functionals"
alias rails-test-integration="rake test:integration"

function rails-test-single () {
    if [ -z "$1" ]; then
        echo 'rails-test-one <test_file.rb> <function_name>'
    else
        local file=
        local test=
        if [ -f "$1" ]; then
            file="$1"
            if [ -n "$2" ]; then
                test="$2"
            fi
        else
            test="$1"
            file="$(ag -l --nocolor --column "def ${test}")"
            local matches="$(wc -l <<< "$file")"

            if [ "x$matches" != "x1" ]; then
                echo "Test ${test} found in multiple files"
                return 1
            fi

            if [ ! -f "$file" ]; then
                echo "Test ${test} not found"
                return 1
            fi
        fi

        if [ -n "$test" ]; then
            ruby -I "$(git root)/test/" "$file" -n "$test"
        else
            ruby -I "$(git root)/test/" "$file"
        fi
    fi
}

function rails-db-migration-last () (
    cdr-migrate && ls | tail -n1
)

function rails-db-migration-last-timestamp () {
    rails-last-migration | cut -d_ -f1
}

function rails-db-migrate-to-file () {
    rake -t db:migrate VERSION="$(argClip "$@" | cut -d_ -f1)"
}

function rails-db-migration-redo () {
    rake -t db:migrate:redo VERSION="$1"
}

function cd-in-rails() {
    local root="$(git root)"
    if [ -n "$root" ]; then
        cd "$(cd "$root/$@" && pwd)"
    else
        return 1
    fi
}
alias cdr="cd-in-rails"

function cdr-config          () { cdr "config";                    }
function cdr-script          () { cdr "script";                    }
function cdr-lib             () { cdr "lib";                       }

function cdr-app             () { cdr "app/$@";                    }
function cdr-controllers     () { cdr "app/controllers/$@";        }
function cdr-models          () { cdr "app/models/$@";             }
function cdr-helpers         () { cdr "app/helpers/$@";            }
function cdr-views           () { cdr "app/views/$@";              }
function cdr-workers         () { cdr "app/workers/$@";            }
function cdr-assets          () { cdr "app/assets/$@";             }
function cdr-javascripts     () { cdr "app/assets/javascripts/$@"; }
function cdr-stylesheets     () { cdr "app/assets/stylesheets/$@"; }

function cdr-db              () { cdr "db/$@";                     }
function cdr-migrate         () { cdr "db/migrate/$@";             }

function cdr-test            () { cdr "test/$@";                   }
function cdr-unit            () { cdr "test/unit/$@";              }
function cdr-functional      () { cdr "test/functional/$@";        }
function cdr-integration     () { cdr "test/integration/$@";       }

##############################
##############################
##
## Docker
##
##############################
##############################

function docker.running () {
    docker ps --format '{{.ID}} {{.Names}}'
}

##############################
##############################
##
## SBT
##
##############################
##############################

function sbt.linters () {
    sbt.scoverage "$@"
    sbt.scapegoat "$@"
}

function sbt.scapegoat () {
    # `scapegoatClean' is done separately as a check to ensure we're in a
    # directory which has both sbt and scapegoat
    sbt scapegoatClean && {
        if [ -n "$1" ]; then
            for project in "$@"; do
                sbt "$project"/scapegoat
            done
        else
            sbt scapegoat
        fi
        find -name scapegoat.html -execdir "$BROWSER" '{}' \;
    }
}

function sbt.scoverage () {
    if [ -n "$1" ]; then
        for project in "$@"; do
            sbt coverage "$project"/test "$project"/coverageReport
        done
    else
        sbt coverage test coverageReport
    fi
    sbt.scoverage.open-reports "$@"
}

function sbt.scoverage.open-reports () {
    if [ -n "$1" ]; then
        for project in "$@"; do
            find "$project" -name "scoverage-report" -execdir "$BROWSER" '{}'/index.html \;
        done
    else
        find -name "scoverage-report" -execdir "$BROWSER" '{}'/index.html \;
    fi
}

##############################
##############################
##
## Atlassian Products
##
##############################
##############################

function atlassian.url-to-crucible-link () {
    local url
    while IFS= read -r url || [[ -n "$url" ]]
    do
        printf '[%s|%s]\n' "$(basename "$url" | cut -d'?' -f1)" "$url"
    done
}

function atlassian.url-to-crucible-link.jira-comment () {
    local url
    while IFS= read -r url || [[ -n "$url" ]]
    do
        printf '[Comment %s|%s]\n' "$(basename "$url" | cut -d'#' -f2 | cut -d- -f2)" "$url"
    done
}

##############################
##############################
##
## Markdown
##
##############################
##############################

function markdown.url-to-link () {
    local url
    while IFS= read -r url || [[ -n "$url" ]]
    do
        printf '[%s](%s)\n' "$(basename "$url" | cut -d'?' -f1)" "$url"
    done
}

##############################
##############################
##
## UUID
##
##############################
##############################

function uuid.str-to-hex-literal () {
    local line
    while IFS= read -r line || [[ -n "$line" ]]
    do
        echo -n '0x'
        tr -d '-' <<< "$line"
    done
}

function uuid.random-lower-case () { uuidgen | tr A-Z a-z ; }

##############################
##############################
##
## S3
##
##############################
##############################

function combine-file-starting-with () {
    local target="$1"

    find "$(dirname "$target")" \
         -type f \
         -name "$(basename "$target")"'*' \
         -execdir cat {} \;
}

##############################
##############################
##
## Aliases
##
##############################
##############################

##### Defaults
function e()    { spawn "$EDITOR" "$@"; }
function bcal() { bc -l "$@"; }

##### Fork functions
alias keepassx='spawn keepassx'

function sman()  { st man "$@";    }
function shelp() { sl help "$@";   }
function sinfo() { st info "$@";   }

##### Web functiones
alias gdocs='go drive.google.com'
alias gcal='go https://www.google.com/calendar/'
alias gmail='go https://mail.google.com'
alias gplus='go https://plus.google.com'

alias g='googleSearch'
alias gi='googleSearch-incognito'
alias goi='go-incognito'

alias weather='go "http://www.weather.com/weather/today/95037"'
alias weathernow='go "http://www.weather.com/weather/right-now/95037"'

##### Lazy functiones
alias ag-literal='ag -Qs'
alias ag-unicode='ag "[\x80-\xFF]"'
alias cl='cleanout'

function today()     { date +"%Y%m%d"  ; }
function todaynice() { date +"%Y/%m/%d"; }

alias simpleServer='python -m SimpleHTTPServer'

function dropsudo() { sudo -k "$@"; }
